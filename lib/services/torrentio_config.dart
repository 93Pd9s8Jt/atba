import 'package:flutter_settings_screens/flutter_settings_screens.dart';

class TorrentioConfig {
  static const Map<String, String> providers = {
    // value, name
    'yts': 'YTS',
    'eztv': 'EZTV',
    'rarbg': 'RARBG',
    '1337x': '1337x',
    'thepiratebay': 'The Pirate Bay',
    'kickasstorrents': 'KickassTorrents',
    'torrentgalaxy': 'TorrentGalaxy',
    'magnetdl': 'MagnetDL',
    'horriblesubs': 'HorribleSubs',
    'nyaasi': 'NyaaSi',
    'tokyotosho': 'TokyoTosho',
    'anidex': 'Anidex',
    'rutor': 'ğŸ‡·ğŸ‡º Rutor',
    'rutracker': 'ğŸ‡·ğŸ‡º RuTracker',
    'comando': 'ğŸ‡µğŸ‡¹ Comando',
    'bludv': 'ğŸ‡µğŸ‡¹ BluDV',
    'torrent9': 'ğŸ‡«ğŸ‡· Torrent9',
    'ilcorsaronero': 'ğŸ‡®ğŸ‡¹ IlCorSaRoNeRo',
    'mejortorrent': 'ğŸ‡ªğŸ‡¸ MejorTorrent',
    'wolfmax4k': 'ğŸ‡ªğŸ‡¸ WolfMax4K',
    'cinecalidad': 'ğŸ‡²ğŸ‡½ CineCalidad',
  };

  static const Map<String, String> languages = {
    'japanese': 'ğŸ‡¯ğŸ‡µ Japanese',
    'russian': 'ğŸ‡·ğŸ‡º Russian',
    'italian': 'ğŸ‡®ğŸ‡¹ Italian',
    'portuguese': 'ğŸ‡µğŸ‡¹ Portuguese',
    'spanish': 'ğŸ‡ªğŸ‡¸ Spanish',
    'latino': 'ğŸ‡²ğŸ‡½ Latino',
    'korean': 'ğŸ‡°ğŸ‡· Korean',
    'chinese': 'ğŸ‡¨ğŸ‡³ Chinese',
    'taiwanese': 'ğŸ‡¹ğŸ‡¼ Taiwanese',
    'french': 'ğŸ‡«ğŸ‡· French',
    'german': 'ğŸ‡©ğŸ‡ª German',
    'dutch': 'ğŸ‡³ğŸ‡± Dutch',
    'hindi': 'ğŸ‡®ğŸ‡³ Hindi',
    'telugu': 'ğŸ‡®ğŸ‡³ Telugu',
    'tamil': 'ğŸ‡®ğŸ‡³ Tamil',
    'polish': 'ğŸ‡µğŸ‡± Polish',
    'lithuanian': 'ğŸ‡±ğŸ‡¹ Lithuanian',
    'latvian': 'ğŸ‡±ğŸ‡» Latvian',
    'estonian': 'ğŸ‡ªğŸ‡ª Estonian',
    'czech': 'ğŸ‡¨ğŸ‡¿ Czech',
    'slovakian': 'ğŸ‡¸ğŸ‡° Slovakian',
    'slovenian': 'ğŸ‡¸ğŸ‡® Slovenian',
    'hungarian': 'ğŸ‡­ğŸ‡º Hungarian',
    'romanian': 'ğŸ‡·ğŸ‡´ Romanian',
    'bulgarian': 'ğŸ‡§ğŸ‡¬ Bulgarian',
    'serbian': 'ğŸ‡·ğŸ‡¸ Serbian',
    'croatian': 'ğŸ‡­ğŸ‡· Croatian',
    'ukrainian': 'ğŸ‡ºğŸ‡¦ Ukrainian',
    'greek': 'ğŸ‡¬ğŸ‡· Greek',
    'danish': 'ğŸ‡©ğŸ‡° Danish',
    'finnish': 'ğŸ‡«ğŸ‡® Finnish',
    'swedish': 'ğŸ‡¸ğŸ‡ª Swedish',
    'norwegian': 'ğŸ‡³ğŸ‡´ Norwegian',
    'turkish': 'ğŸ‡¹ğŸ‡· Turkish',
    'arabic': 'ğŸ‡¸ğŸ‡¦ Arabic',
    'persian': 'ğŸ‡®ğŸ‡· Persian',
    'hebrew': 'ğŸ‡®ğŸ‡± Hebrew',
    'vietnamese': 'ğŸ‡»ğŸ‡³ Vietnamese',
    'indonesian': 'ğŸ‡®ğŸ‡© Indonesian',
    'malay': 'ğŸ‡²ğŸ‡¾ Malay',
    'thai': 'ğŸ‡¹ğŸ‡­ Thai',
  };

  static const Map<String, String> qualities = { 
    'brremux': 'BluRay REMUX',
    'hdrall': 'HDR/HDR10+/Dolby Vision',
    'dolbyvision': 'Dolby Vision',
    'dolbyvisionwithhdr': 'Dolby Vision + HDR',
    'threed': '3D',
    'nonthreed': 'Non 3D (DO NOT SELECT IF NOT SURE)',
    '4k': '4K',
    '1080p': '1080p',
    '720p': '720p',
    '480p': '480p',
    'other': 'Other (DVDRip/HDRIp/BDRip...)',
    'scr': 'Screener',
    'cam': 'Cam',
    'unknown': 'Unknown',
  };

  static final String CSPROVIDERS = providers.keys.where((key) => Settings.getValue<bool>("key-provider-$key") ?? false).join(',');
  static final String CSLANGUAGES = languages.keys.where((key) => Settings.getValue<bool>("key-language-$key") ?? false).join(',');
  static final String CSQUALITIES = qualities.keys.where((key) => Settings.getValue<bool>("key-exclude-quality-$key") ?? false).join(',');
  static final String SORTBY = {1: '', 2: 'qualitysize', 3: 'seeders', 4: 'size'}[Settings.getValue<int>("key-sort-by") ?? 1]!;
  static final String SIZELIMIT = Settings.getValue<String>("key-video-size-limit") ?? '';
  static final String NUMBERPERQUALITYLIMIT = Settings.getValue<String>("key-max-results-per-quality") ?? ''; // TODO: validate
}

enum SearchType { movie, tv }

extension SearchTypeExtension on SearchType {
  String get name {
    switch (this) {
      case SearchType.movie:
        return 'movie';
      case SearchType.tv:
        return 'series';
    }
  }
}
